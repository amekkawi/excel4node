{"version":3,"sources":["../../../source/lib/cell/index.js"],"names":["deepmerge","require","Cell","Row","Comment","Column","Style","utils","util","validXmlRegex","removeInvalidXml","str","Array","from","map","cp","c","codePointAt","match","join","stringSetter","val","logger","ws","wb","warn","JSON","stringify","excelRefs","merged","cells","forEach","string","getStringIndex","complexStringSetter","numberSetter","undefined","parseFloat","TypeError","format","i","number","booleanSetter","toString","toLowerCase","bool","formulaSetter","formula","dateSetter","thisDate","Date","isNaN","getTime","date","dtStyle","numberFormat","opts","dateFormat","styleSetter","bind","thisStyle","toObject","Object","borderEdges","border","outline","left","firstCol","right","lastCol","top","firstRow","bottom","lastRow","thisCellsBorder","row","col","s","thisCellStyle","createStyle","style","ids","cellXfs","curStyle","styles","newStyleOpts","mergedStyle","hyperlinkSetter","url","displayStr","tooltip","ref","hyperlinkCollection","add","location","display","font","color","underline","commentSetter","comment","options","comments","r","mergeCells","cellBlock","length","sort","sortCellRefs","cellRange","rangeCells","okToMerge","mergedCells","cr","curCells","getAllCellsInExcelRange","intersection","arrayIntersectSafe","error","push","matrix","tmpObj","rows","keys","a","b","cellAccessor","row1","col1","row2","col2","isMerged","theseCells","lastUsedRow","lastUsedCol","getExcelAlpha","cellRefs","indexOf","prototype","link","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const deepmerge = require('deepmerge');\r\nconst Cell = require('./cell.js');\r\nconst Row = require('../row/row.js');\r\nconst Comment = require('../classes/comment');\r\nconst Column = require('../column/column.js');\r\nconst Style = require('../style/style.js');\r\nconst utils = require('../utils.js');\r\nconst util = require('util');\r\n\r\nconst validXmlRegex = /[\\u0009\\u000a\\u000d\\u0020-\\uD7FF\\uE000-\\uFFFD]/u;\r\n\r\n/**\r\n * The list of valid characters is\r\n * #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\r\n *\r\n * We need to test codepoints numerically, instead of regex characters above 65536 (0x10000),\r\n */\r\nfunction removeInvalidXml(str) {\r\n    return Array.from(str).map(c => {\r\n        const cp = c.codePointAt(0);\r\n        if (cp >= 65536 && cp <= 1114111) {\r\n            return c\r\n        } else if (c.match(validXmlRegex)) {\r\n            return c;\r\n        } else {\r\n            return '';\r\n        }\r\n    }).join('');\r\n}\r\n\r\nfunction stringSetter(val) {\r\n    let logger = this.ws.wb.logger;\r\n\r\n    if (typeof (val) !== 'string') {\r\n        logger.warn('Value sent to String function of cells %s was not a string, it has type of %s',\r\n            JSON.stringify(this.excelRefs),\r\n            typeof (val));\r\n        val = '';\r\n    }\r\n    val = removeInvalidXml(val);\r\n\r\n    if (!this.merged) {\r\n        this.cells.forEach((c) => {\r\n            c.string(this.ws.wb.getStringIndex(val));\r\n        });\r\n    } else {\r\n        let c = this.cells[0];\r\n        c.string(this.ws.wb.getStringIndex(val));\r\n    }\r\n    return this;\r\n}\r\n\r\nfunction complexStringSetter(val) {\r\n    if (!this.merged) {\r\n        this.cells.forEach((c) => {\r\n            c.string(this.ws.wb.getStringIndex(val));\r\n        });\r\n    } else {\r\n        let c = this.cells[0];\r\n        c.string(this.ws.wb.getStringIndex(val));\r\n    }\r\n    return this;\r\n}\r\n\r\nfunction numberSetter(val) {\r\n    if (val === undefined || parseFloat(val) !== val) {\r\n        throw new TypeError(util.format('Value sent to Number function of cells %s was not a number, it has type of %s and value of %s',\r\n            JSON.stringify(this.excelRefs),\r\n            typeof (val),\r\n            val\r\n        ));\r\n    }\r\n    val = parseFloat(val);\r\n\r\n    if (!this.merged) {\r\n        this.cells.forEach((c, i) => {\r\n            c.number(val);\r\n        });\r\n    } else {\r\n        var c = this.cells[0];\r\n        c.number(val);\r\n    }\r\n    return this;\r\n}\r\n\r\nfunction booleanSetter(val) {\r\n    if (val === undefined || typeof (val.toString().toLowerCase() === 'true' || ((val.toString().toLowerCase() === 'false') ? false : val)) !== 'boolean') {\r\n        throw new TypeError(util.format('Value sent to Bool function of cells %s was not a bool, it has type of %s and value of %s',\r\n            JSON.stringify(this.excelRefs),\r\n            typeof (val),\r\n            val\r\n        ));\r\n    }\r\n    val = val.toString().toLowerCase() === 'true';\r\n\r\n    if (!this.merged) {\r\n        this.cells.forEach((c, i) => {\r\n            c.bool(val.toString());\r\n        });\r\n    } else {\r\n        var c = this.cells[0];\r\n        c.bool(val.toString());\r\n    }\r\n    return this;\r\n}\r\n\r\nfunction formulaSetter(val) {\r\n    if (typeof (val) !== 'string') {\r\n        throw new TypeError(util.format('Value sent to Formula function of cells %s was not a string, it has type of %s', JSON.stringify(this.excelRefs), typeof (val)));\r\n    }\r\n    if (this.merged !== true) {\r\n        this.cells.forEach((c, i) => {\r\n            c.formula(val);\r\n        });\r\n    } else {\r\n        var c = this.cells[0];\r\n        c.formula(val);\r\n    }\r\n\r\n    return this;\r\n}\r\n\r\nfunction dateSetter(val) {\r\n    let thisDate = new Date(val);\r\n    if (isNaN(thisDate.getTime())) {\r\n        throw new TypeError(util.format('Invalid date sent to date function of cells. %s could not be converted to a date.', val));\r\n    }\r\n    if (this.merged !== true) {\r\n        this.cells.forEach((c, i) => {\r\n            c.date(thisDate);\r\n        });\r\n    } else {\r\n        var c = this.cells[0];\r\n        c.date(thisDate);\r\n    }\r\n    const dtStyle = new Style(this.ws.wb, {\r\n        numberFormat: '[$-409]' + this.ws.wb.opts.dateFormat\r\n    });\r\n    return styleSetter.bind(this)(dtStyle);\r\n}\r\n\r\nfunction styleSetter(val) {\r\n    let thisStyle;\r\n    if (val instanceof Style) {\r\n        thisStyle = val.toObject();\r\n    } else if (val instanceof Object) {\r\n        thisStyle = val;\r\n    } else {\r\n        throw new TypeError(util.format('Parameter sent to Style function must be an instance of a Style or a style configuration object'));\r\n    }\r\n\r\n    let borderEdges = {};\r\n    if (thisStyle.border && thisStyle.border.outline) {\r\n        borderEdges.left = this.firstCol;\r\n        borderEdges.right = this.lastCol;\r\n        borderEdges.top = this.firstRow;\r\n        borderEdges.bottom = this.lastRow;\r\n    }\r\n\r\n    this.cells.forEach((c) => {\r\n        if (thisStyle.border && thisStyle.border.outline) {\r\n            let thisCellsBorder = {};\r\n            if (c.row === borderEdges.top && thisStyle.border.top) {\r\n                thisCellsBorder.top = thisStyle.border.top;\r\n            }\r\n            if (c.row === borderEdges.bottom && thisStyle.border.bottom) {\r\n                thisCellsBorder.bottom = thisStyle.border.bottom;\r\n            }\r\n            if (c.col === borderEdges.left && thisStyle.border.left) {\r\n                thisCellsBorder.left = thisStyle.border.left;\r\n            }\r\n            if (c.col === borderEdges.right && thisStyle.border.right) {\r\n                thisCellsBorder.right = thisStyle.border.right;\r\n            }\r\n            thisStyle.border = thisCellsBorder;\r\n        }\r\n\r\n        if (c.s === 0) {\r\n            let thisCellStyle = this.ws.wb.createStyle(thisStyle);\r\n            c.style(thisCellStyle.ids.cellXfs);\r\n        } else {\r\n            let curStyle = this.ws.wb.styles[c.s];\r\n            let newStyleOpts = deepmerge(curStyle.toObject(), thisStyle);\r\n            let mergedStyle = this.ws.wb.createStyle(newStyleOpts);\r\n            c.style(mergedStyle.ids.cellXfs);\r\n        }\r\n    });\r\n    return this;\r\n}\r\n\r\nfunction hyperlinkSetter(url, displayStr, tooltip) {\r\n    this.excelRefs.forEach((ref) => {\r\n        displayStr = typeof displayStr === 'string' ? displayStr : url;\r\n        this.ws.hyperlinkCollection.add({\r\n            location: url,\r\n            display: displayStr,\r\n            tooltip: tooltip,\r\n            ref: ref\r\n        });\r\n    });\r\n    stringSetter.bind(this)(displayStr);\r\n    return styleSetter.bind(this)({\r\n        font: {\r\n            color: 'Blue',\r\n            underline: true\r\n        }\r\n    });\r\n}\r\n\r\nfunction commentSetter(comment, options) {\r\n    if (this.merged !== true) {\r\n        this.cells.forEach((c, i) => {\r\n            this.ws.comments[c.r] = new Comment(c.r, comment, options)\r\n        });\r\n    } else {\r\n        var c = this.cells[0];\r\n        this.ws.comments[c.r] = new Comment(c.r, comment, options)\r\n    }\r\n    return this;\r\n}\r\n\r\nfunction mergeCells(cellBlock) {\r\n    let excelRefs = cellBlock.excelRefs;\r\n    if (excelRefs instanceof Array && excelRefs.length > 0) {\r\n        excelRefs.sort(utils.sortCellRefs);\r\n\r\n        let cellRange = excelRefs[0] + ':' + excelRefs[excelRefs.length - 1];\r\n        let rangeCells = excelRefs;\r\n\r\n        let okToMerge = true;\r\n        cellBlock.ws.mergedCells.forEach((cr) => {\r\n            // Check to see if currently merged cells contain cells in new merge request\r\n            let curCells = utils.getAllCellsInExcelRange(cr);\r\n            let intersection = utils.arrayIntersectSafe(rangeCells, curCells);\r\n            if (intersection.length > 0) {\r\n                okToMerge = false;\r\n                cellBlock.ws.wb.logger.error(`Invalid Range for: ${cellRange}. Some cells in this range are already included in another merged cell range: ${cr}.`);\r\n            }\r\n        });\r\n        if (okToMerge) {\r\n            cellBlock.ws.mergedCells.push(cellRange);\r\n        }\r\n    } else {\r\n        throw new TypeError(util.format('excelRefs variable sent to mergeCells function must be an array with length > 0'));\r\n    }\r\n}\r\n\r\n/**\r\n * @class cellBlock\r\n */\r\nclass cellBlock {\r\n\r\n    constructor() {\r\n        this.ws;\r\n        this.cells = [];\r\n        this.excelRefs = [];\r\n        this.merged = false;\r\n    }\r\n\r\n    get matrix() {\r\n        let matrix = [];\r\n        let tmpObj = {};\r\n        this.cells.forEach((c) => {\r\n            if (!tmpObj[c.row]) {\r\n                tmpObj[c.row] = [];\r\n            }\r\n            tmpObj[c.row].push(c);\r\n        });\r\n        let rows = Object.keys(tmpObj);\r\n        rows.forEach((r) => {\r\n            tmpObj[r].sort((a, b) => {\r\n                return a.col - b.col;\r\n            });\r\n            matrix.push(tmpObj[r]);\r\n        });\r\n        return matrix;\r\n    }\r\n\r\n    get firstRow() {\r\n        let firstRow;\r\n        this.cells.forEach((c) => {\r\n            if (c.row < firstRow || firstRow === undefined) {\r\n                firstRow = c.row;\r\n            }\r\n        });\r\n        return firstRow;\r\n    }\r\n\r\n    get lastRow() {\r\n        let lastRow;\r\n        this.cells.forEach((c) => {\r\n            if (c.row > lastRow || lastRow === undefined) {\r\n                lastRow = c.row;\r\n            }\r\n        });\r\n        return lastRow;\r\n    }\r\n\r\n    get firstCol() {\r\n        let firstCol;\r\n        this.cells.forEach((c) => {\r\n            if (c.col < firstCol || firstCol === undefined) {\r\n                firstCol = c.col;\r\n            }\r\n        });\r\n        return firstCol;\r\n    }\r\n\r\n    get lastCol() {\r\n        let lastCol;\r\n        this.cells.forEach((c) => {\r\n            if (c.col > lastCol || lastCol === undefined) {\r\n                lastCol = c.col;\r\n            }\r\n        });\r\n        return lastCol;\r\n    }\r\n}\r\n\r\n/**\r\n * Module repesenting a Cell Accessor\r\n * @alias Worksheet.cell\r\n * @namespace\r\n * @func Worksheet.cell\r\n * @desc Access a range of cells in order to manipulate values\r\n * @param {Number} row1 Row of top left cell\r\n * @param {Number} col1 Column of top left cell\r\n * @param {Number} row2 Row of bottom right cell (optional)\r\n * @param {Number} col2 Column of bottom right cell (optional)\r\n * @param {Boolean} isMerged Merged the cell range into a single cell\r\n * @returns {cellBlock}\r\n */\r\nfunction cellAccessor(row1, col1, row2, col2, isMerged) {\r\n    let theseCells = new cellBlock();\r\n    theseCells.ws = this;\r\n\r\n    row2 = row2 ? row2 : row1;\r\n    col2 = col2 ? col2 : col1;\r\n\r\n    if (row2 > this.lastUsedRow) {\r\n        this.lastUsedRow = row2;\r\n    }\r\n\r\n    if (col2 > this.lastUsedCol) {\r\n        this.lastUsedCol = col2;\r\n    }\r\n\r\n    for (let r = row1; r <= row2; r++) {\r\n        for (let c = col1; c <= col2; c++) {\r\n            let ref = `${utils.getExcelAlpha(c)}${r}`;\r\n            if (!this.cells[ref]) {\r\n                this.cells[ref] = new Cell(r, c);\r\n            }\r\n            if (!this.rows[r]) {\r\n                this.rows[r] = new Row(r, this);\r\n            }\r\n            if (this.rows[r].cellRefs.indexOf(ref) < 0) {\r\n                this.rows[r].cellRefs.push(ref);\r\n            }\r\n\r\n            theseCells.cells.push(this.cells[ref]);\r\n            theseCells.excelRefs.push(ref);\r\n        }\r\n    }\r\n    if (isMerged) {\r\n        theseCells.merged = true;\r\n        mergeCells(theseCells);\r\n    }\r\n\r\n    return theseCells;\r\n}\r\n\r\n/**\r\n * @alias cellBlock.string\r\n * @func cellBlock.string\r\n * @param {String} val Value of String\r\n * @returns {cellBlock} Block of cells with attached methods\r\n */\r\ncellBlock.prototype.string = function (val) {\r\n    if (val instanceof Array) {\r\n        return complexStringSetter.bind(this)(val);\r\n    } else {\r\n        return stringSetter.bind(this)(val);\r\n    }\r\n};\r\n\r\n/**\r\n * @alias cellBlock.style\r\n * @func cellBlock.style\r\n * @param {Object} style One of a Style instance or an object with Style parameters\r\n * @returns {cellBlock} Block of cells with attached methods\r\n */\r\ncellBlock.prototype.style = styleSetter;\r\n\r\n/**\r\n * @alias cellBlock.number\r\n * @func cellBlock.number\r\n * @param {Number} val Value of Number\r\n * @returns {cellBlock} Block of cells with attached methods\r\n */\r\ncellBlock.prototype.number = numberSetter;\r\n\r\n/**\r\n * @alias cellBlock.bool\r\n * @func cellBlock.bool\r\n * @param {Boolean} val Value of Boolean\r\n * @returns {cellBlock} Block of cells with attached methods\r\n */\r\ncellBlock.prototype.bool = booleanSetter;\r\n\r\n/**\r\n * @alias cellBlock.formula\r\n * @func cellBlock.formula\r\n * @param {String} val Excel style formula as string\r\n * @returns {cellBlock} Block of cells with attached methods\r\n */\r\ncellBlock.prototype.formula = formulaSetter;\r\n\r\n/**\r\n * @alias cellBlock.date\r\n * @func cellBlock.date\r\n * @param {Date} val Value of Date\r\n * @returns {cellBlock} Block of cells with attached methods\r\n */\r\ncellBlock.prototype.date = dateSetter;\r\n\r\n/**\r\n * @alias cellBlock.link\r\n * @func cellBlock.link\r\n * @param {String} url Value of Hyperlink URL\r\n * @param {String} displayStr Value of String representation of URL\r\n * @param {String} tooltip Value of text to display as hover\r\n * @returns {cellBlock} Block of cells with attached methods\r\n */\r\ncellBlock.prototype.link = hyperlinkSetter;\r\n\r\ncellBlock.prototype.comment = commentSetter;\r\n\r\nmodule.exports = cellAccessor;"]}