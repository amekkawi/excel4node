{"version":3,"sources":["../../../source/lib/workbook/workbook.js"],"names":["_","require","fs","utils","Worksheet","Style","Border","Fill","DXFCollection","MediaCollection","DefinedNameCollection","SlothLogger","types","builder","http","workbookDefaultOpts","jszip","compression","defaultFont","dateFormat","Workbook","opts","logger","Logger","logLevel","Number","isNaN","parseInt","merge","sheets","sharedStrings","styles","dxfCollection","mediaCollection","definedNameCollection","styleData","type","patternType","createStyle","font","id","forEach","s","sheetId","sheetView","tabSelected","writeToBuffer","fileName","handler","then","buffer","ServerResponse","writeHead","length","end","TypeError","writeFile","err","stat","catch","e","Error","stack","name","newLength","push","thisStyle","checkCount","undefined","isEqual","toObject","count","ids","cellXfs","val","indexOf","module","exports"],"mappings":"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","file":"workbook.js","sourcesContent":["const _ = require('lodash');\nconst fs = require('fs');\nconst utils = require('../utils.js');\nconst Worksheet = require('../worksheet');\nconst Style = require('../style');\nconst Border = require('../style/classes/border.js');\nconst Fill = require('../style/classes/fill.js');\nconst DXFCollection = require('./dxfCollection.js');\nconst MediaCollection = require('./mediaCollection.js');\nconst DefinedNameCollection = require('../classes/definedNameCollection.js');\nconst SlothLogger = require('sloth-logger');\nconst types = require('../types/index.js');\nconst builder = require('./builder.js');\nconst http = require('http');\n\n\n/* Available options for Workbook\n{\n    jszip : {\n        compression : 'DEFLATE'\n    },\n    defaultFont : {\n        size : 12,\n        family : 'Calibri',\n        color : 'FFFFFFFF'\n    }\n}\n*/\n// Default Options for Workbook\nlet workbookDefaultOpts = {\n    jszip: {\n        compression: 'DEFLATE'\n    },\n    defaultFont: {\n        'color': 'FF000000',\n        'name': 'Calibri',\n        'size': 12,\n        'family': 'roman'\n    },\n    dateFormat: 'm/d/yy'\n};\n\n\nclass Workbook {\n\n    /**\n     * @class Workbook\n     * @param {Object} opts Workbook settings\n     * @param {Object} opts.jszip\n     * @param {String} opts.jszip.compression JSZip compression type. defaults to 'DEFLATE'\n     * @param {Object} opts.defaultFont\n     * @param {String} opts.defaultFont.color HEX value of default font color. defaults to #000000\n     * @param {String} opts.defaultFont.name Font name. defaults to Calibri\n     * @param {Number} opts.defaultFont.size Font size. defaults to 12\n     * @param {String} opts.defaultFont.family Font family. defaults to roman\n     * @param {String} opts.dataFormat Specifies the format for dates in the Workbook. defaults to 'm/d/yy'\n     * @returns {Workbook}\n     */\n    constructor(opts) {\n        opts = opts ? opts : {};\n\n        this.logger = new SlothLogger.Logger({\n            logLevel: Number.isNaN(parseInt(opts.logLevel)) ? 0 : parseInt(opts.logLevel)\n        });\n\n        this.opts = _.merge({}, workbookDefaultOpts, opts);\n\n        this.sheets = [];\n        this.sharedStrings = [];\n        this.styles = [];\n        this.dxfCollection = new DXFCollection(this);\n        this.mediaCollection = new MediaCollection();\n        this.definedNameCollection = new DefinedNameCollection();\n        this.styleData = {\n            'numFmts': [],\n            'fonts': [],\n            'fills': [new Fill({ type: 'pattern', patternType: 'none' }), new Fill({ type: 'pattern', patternType: 'gray125' })],\n            'borders': [new Border()],\n            'cellXfs': [\n                {\n                    'borderId': null,\n                    'fillId': null,\n                    'fontId': 0,\n                    'numFmtId': null\n                }\n            ]\n        };\n\n        // Set Default Font and Style\n        this.createStyle({ font: this.opts.defaultFont });\n\n    }\n\n    /**\n     * setSelectedTab\n     * @param {Number} tab number of sheet that should be displayed when workbook opens. tabs are indexed starting with 1\n     **/\n    setSelectedTab(id) {\n        this.sheets.forEach((s) => {\n            if (s.sheetId === id) {\n                s.opts.sheetView.tabSelected = 1;\n            } else {\n                s.opts.sheetView.tabSelected = 0;\n            }\n        });\n    }\n\n    /**\n     * writeToBuffer\n     * Writes Excel data to a node Buffer.\n     */\n    writeToBuffer() {\n        return builder.writeToBuffer(this);\n    }\n\n    /**\n     * Generate .xlsx file.\n     * @param {String} fileName Name of Excel workbook with .xslx extension\n     * @param {http.response | callback} http response object or callback function (optional).\n     * If http response object is given, file is written to http response. Useful for web applications.\n     * If callback is given, callback called with (err, fs.Stats) passed\n     */\n    write(fileName, handler) {\n\n        builder.writeToBuffer(this)\n        .then((buffer) => {\n            switch (typeof handler) {\n                // handler passed as http response object.\n\n            case 'object':\n                if (handler instanceof http.ServerResponse) {\n                    handler.writeHead(200, {\n                        'Content-Length': buffer.length,\n                        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n                        'Content-Disposition': 'attachment; filename=\"' + fileName + '\"'\n                    });\n                    handler.end(buffer);\n                } else {\n                    throw new TypeError('Unknown object sent to write function.');\n                }\n                break;\n\n            // handler passed as callback function\n            case 'function':\n                fs.writeFile(fileName, buffer, function (err) {\n                    if (err) {\n                        handler(err);\n                    } else {\n                        fs.stat(fileName, handler);\n                    }\n                });\n                break;\n\n            // no handler passed, write file to FS.\n            default:\n\n                fs.writeFile(fileName, buffer, function (err) {\n                    if (err) {\n                        throw err;\n                    }\n                });\n                break;\n            }\n        })\n        .catch((e) => {\n            throw new Error(e.stack);\n        });\n    }\n\n    /**\n     * Add a worksheet to the Workbook\n     * @param {String} name Name of the Worksheet\n     * @param {Object} opts Options for Worksheet. See Worksheet class definition\n     * @returns {Worksheet}\n     */\n    addWorksheet(name, opts) {\n        let newLength = this.sheets.push(new Worksheet(this, name, opts));\n        return this.sheets[newLength - 1];\n    }\n\n    /**\n     * Add a Style to the Workbook\n     * @param {Object} opts Options for the style. See Style class definition\n     * @returns {Style}\n     */\n    createStyle(opts) {\n        let thisStyle;\n        let checkCount = 0;\n        while (thisStyle === undefined && checkCount < this.styles.length) {\n            if (_.isEqual(this.styles[checkCount].toObject(), opts)) {\n                thisStyle = this.styles[checkCount];\n            }\n            checkCount++;\n        }\n        if (thisStyle === undefined) {\n            thisStyle = new Style(this, opts);\n            let count = this.styles.push(thisStyle);\n            this.styles[count - 1].ids.cellXfs = count - 1;\n            return this.styles[count - 1];\n        } else {\n            return thisStyle;\n        }\n    }\n\n    /**\n     * Gets the index of a string from the shared string array if exists and adds the string if it does not and returns the new index\n     * @param {String} val Text of string\n     * @returns {Number} index of the string in the shared strings array\n     */\n    getStringIndex(val) {\n        if (this.sharedStrings.indexOf(val) < 0) {\n            this.sharedStrings.push(val);\n        }\n        return this.sharedStrings.indexOf(val);\n    }\n}\n\nmodule.exports = Workbook;"]}