{"version":3,"sources":["../../../source/lib/workbook/workbook.js"],"names":["_isUndefined","require","deepmerge","fs","utils","Worksheet","Style","Border","Fill","Font","DXFCollection","MediaCollection","ChartsCollection","DefinedNameCollection","types","builder","http","SimpleLogger","workbookDefaultOpts","jszip","compression","defaultFont","dateFormat","Workbook","opts","hasCustomLogger","logger","undefined","hasValidCustomLogger","warn","error","logLevel","Number","isNaN","parseInt","log","author","sheets","sharedStrings","sharedStringLookup","Map","styles","stylesLookup","dxfCollection","mediaCollection","chartsCollection","definedNameCollection","styleData","type","patternType","styleDataLookup","fills","reduce","ret","fill","index","JSON","stringify","toObject","borders","border","createStyle","font","id","forEach","s","sheetId","sheetView","tabSelected","writeToBuffer","fileName","handler","then","buffer","ServerResponse","writeHead","length","encodeURIComponent","end","TypeError","writeFile","err","stat","catch","e","stack","status","setHeader","name","newLength","push","thisStyle","lookupKey","get","set","ids","cellXfs","val","target","workbookXML","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,eAAeC,QAAQ,oBAAR,CAArB;AACA,IAAMC,YAAYD,QAAQ,WAAR,CAAlB;AACA,IAAME,KAAKF,QAAQ,IAAR,CAAX;AACA,IAAMG,QAAQH,QAAQ,aAAR,CAAd;AACA,IAAMI,YAAYJ,QAAQ,cAAR,CAAlB;AACA,IAAMK,QAAQL,QAAQ,UAAR,CAAd;AACA,IAAMM,SAASN,QAAQ,4BAAR,CAAf;AACA,IAAMO,OAAOP,QAAQ,0BAAR,CAAb;AACA,IAAMQ,OAAOR,QAAQ,uBAAR,CAAb;AACA,IAAMS,gBAAgBT,QAAQ,oBAAR,CAAtB;AACA,IAAMU,kBAAkBV,QAAQ,sBAAR,CAAxB;AACA,IAAMW,mBAAmBX,QAAQ,uBAAR,CAAzB;AACA,IAAMY,wBAAwBZ,QAAQ,qCAAR,CAA9B;AACA,IAAMa,QAAQb,QAAQ,mBAAR,CAAd;AACA,IAAMc,UAAUd,QAAQ,cAAR,CAAhB;AACA,IAAMe,OAAOf,QAAQ,MAAR,CAAb;AACA,IAAMgB,eAAehB,QAAQ,WAAR,CAArB;;AAEA;;;;;;;;;;;;AAYA;AACA,IAAIiB,sBAAsB;AACtBC,WAAO;AACHC,qBAAa;AADV,KADe;AAItBC,iBAAa;AACT,iBAAS,UADA;AAET,gBAAQ,SAFC;AAGT,gBAAQ,EAHC;AAIT,kBAAU;AAJD,KAJS;AAUtBC,gBAAY;AAVU,CAA1B;;IAcMC,Q;;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,wBAAuB;AAAA,YAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAEnB,YAAMC,kBAAkBD,KAAKE,MAAL,KAAgBC,SAAxC;AACA,YAAMC,uBAAuBH,mBAAmB,OAAOD,KAAKE,MAAL,CAAYG,IAAnB,KAA4B,UAA/C,IAA6D,OAAOL,KAAKE,MAAL,CAAYI,KAAnB,KAA6B,UAAvH;;AAEA,aAAKJ,MAAL,GAAcE,uBAAuBJ,KAAKE,MAA5B,GAAqC,IAAIT,YAAJ,CAAiB;AAChEc,sBAAUC,OAAOC,KAAP,CAAaC,SAASV,KAAKO,QAAd,CAAb,IAAwC,CAAxC,GAA4CG,SAASV,KAAKO,QAAd;AADU,SAAjB,CAAnD;AAGA,YAAIN,mBAAmB,CAACG,oBAAxB,EAA8C;AAC1C,iBAAKF,MAAL,CAAYS,GAAZ,CAAgB,mCAAhB;AACH;;AAED,aAAKX,IAAL,GAAYtB,UAAUgB,mBAAV,EAA+BM,IAA/B,CAAZ;AACA,aAAKY,MAAL,GAAc,KAAKZ,IAAL,CAAUY,MAAV,IAAoB,uBAAlC;;AAEA,aAAKC,MAAL,GAAc,EAAd;AACA,aAAKC,aAAL,GAAqB,EAArB;AACA,aAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;AACA,aAAKC,MAAL,GAAc,EAAd;AACA,aAAKC,YAAL,GAAoB,IAAIF,GAAJ,EAApB;AACA,aAAKG,aAAL,GAAqB,IAAIjC,aAAJ,CAAkB,IAAlB,CAArB;AACA,aAAKkC,eAAL,GAAuB,IAAIjC,eAAJ,EAAvB;AACA,aAAKkC,gBAAL,GAAwB,IAAIjC,gBAAJ,EAAxB;AACA,aAAKkC,qBAAL,GAA6B,IAAIjC,qBAAJ,EAA7B;AACA,aAAKkC,SAAL,GAAiB;AACb,uBAAW,EADE;AAEb,qBAAS,EAFI;AAGb,qBAAS,CAAC,IAAIvC,IAAJ,CAAS;AACfwC,sBAAM,SADS;AAEfC,6BAAa;AAFE,aAAT,CAAD,EAGL,IAAIzC,IAAJ,CAAS;AACTwC,sBAAM,SADG;AAETC,6BAAa;AAFJ,aAAT,CAHK,CAHI;AAUb,uBAAW,CAAC,IAAI1C,MAAJ,EAAD,CAVE;AAWb,uBAAW,CAAC;AACR,4BAAY,IADJ;AAER,0BAAU,IAFF;AAGR,0BAAU,CAHF;AAIR,4BAAY;AAJJ,aAAD;AAXE,SAAjB;;AAmBA;AACA;AACA;AACA,aAAK2C,eAAL,GAAuB;AACnB,qBAAS,EADU;AAEnB,qBAAS,KAAKH,SAAL,CAAeI,KAAf,CAAqBC,MAArB,CAA4B,UAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,EAAsB;AACvDF,oBAAIG,KAAKC,SAAL,CAAeH,KAAKI,QAAL,EAAf,CAAJ,IAAuCH,KAAvC;AACA,uBAAOF,GAAP;AACH,aAHQ,EAGN,EAHM,CAFU;AAMnB,uBAAW,KAAKN,SAAL,CAAeY,OAAf,CAAuBP,MAAvB,CAA8B,UAACC,GAAD,EAAMO,MAAN,EAAcL,KAAd,EAAwB;AAC7DF,oBAAIG,KAAKC,SAAL,CAAeG,OAAOF,QAAP,EAAf,CAAJ,IAAyCH,KAAzC;AACA,uBAAOF,GAAP;AACH,aAHU,EAGR,EAHQ;AANQ,SAAvB;;AAYA;AACA,aAAKQ,WAAL,CAAiB;AACbC,kBAAM,KAAKtC,IAAL,CAAUH;AADH,SAAjB;AAGH;;AAED;;;;;;;;uCAIe0C,E,EAAI;AACf,iBAAK1B,MAAL,CAAY2B,OAAZ,CAAoB,UAACC,CAAD,EAAO;AACvB,oBAAIA,EAAEC,OAAF,KAAcH,EAAlB,EAAsB;AAClBE,sBAAEzC,IAAF,CAAO2C,SAAP,CAAiBC,WAAjB,GAA+B,CAA/B;AACH,iBAFD,MAEO;AACHH,sBAAEzC,IAAF,CAAO2C,SAAP,CAAiBC,WAAjB,GAA+B,CAA/B;AACH;AACJ,aAND;AAOH;;AAED;;;;;;;wCAIgB;AACZ,mBAAOrD,QAAQsD,aAAR,CAAsB,IAAtB,CAAP;AACH;;AAED;;;;;;;;;;8BAOMC,Q,EAAUC,O,EAAS;AAAA;;AAErBxD,oBAAQsD,aAAR,CAAsB,IAAtB,EACKG,IADL,CACU,UAACC,MAAD,EAAY;AACd,+BAAeF,OAAf,yCAAeA,OAAf;AACI;;AAEA,yBAAK,QAAL;AACI,4BAAIA,mBAAmBvD,KAAK0D,cAA5B,EAA4C;AACxCH,oCAAQI,SAAR,CAAkB,GAAlB,EAAuB;AACnB,kDAAkBF,OAAOG,MADN;AAEnB,gDAAgB,mEAFG;AAGnB,kFAAgDC,mBAAmBP,QAAnB,CAAhD,8BAAmGO,mBAAmBP,QAAnB,CAAnG;AAHmB,6BAAvB;AAKAC,oCAAQO,GAAR,CAAYL,MAAZ;AACH,yBAPD,MAOO;AACH,kCAAM,IAAIM,SAAJ,CAAc,wCAAd,CAAN;AACH;AACD;;AAEA;AACJ,yBAAK,UAAL;AACI5E,2BAAG6E,SAAH,CAAaV,QAAb,EAAuBG,MAAvB,EAA+B,UAAUQ,GAAV,EAAe;AAC1C,gCAAIA,GAAJ,EAAS;AACLV,wCAAQU,GAAR;AACH,6BAFD,MAEO;AACH9E,mCAAG+E,IAAH,CAAQZ,QAAR,EAAkBC,OAAlB;AACH;AACJ,yBAND;AAOA;;AAEA;AACJ;;AAEIpE,2BAAG6E,SAAH,CAAaV,QAAb,EAAuBG,MAAvB,EAA+B,UAAUQ,GAAV,EAAe;AAC1C,gCAAIA,GAAJ,EAAS;AACL,sCAAMA,GAAN;AACH;AACJ,yBAJD;AAKA;AAnCR;AAqCH,aAvCL,EAwCKE,KAxCL,CAwCW,UAACC,CAAD,EAAO;AACV,oBAAIb,mBAAmBvD,KAAK0D,cAA5B,EAA4C;AACxC,0BAAKhD,MAAL,CAAYI,KAAZ,CAAkBsD,EAAEC,KAApB;AACAd,4BAAQe,MAAR,GAAiB,GAAjB;AACAf,4BAAQgB,SAAR,CAAkB,cAAlB,EAAkC,YAAlC;AACAhB,4BAAQO,GAAR,CAAY,kBAAZ;AACH,iBALD,MAKO,IAAI,OAAOP,OAAP,KAAmB,UAAvB,EAAmC;AACtCA,4BAAQa,EAAEC,KAAV;AACH,iBAFM,MAEA;AACH,0BAAK3D,MAAL,CAAYI,KAAZ,CAAkBsD,EAAEC,KAApB;AACH;AACJ,aAnDL;AAoDH;;AAED;;;;;;;;;qCAMaG,I,EAAMhE,I,EAAM;AACrB,gBAAIiE,YAAY,KAAKpD,MAAL,CAAYqD,IAAZ,CAAiB,IAAIrF,SAAJ,CAAc,IAAd,EAAoBmF,IAApB,EAA0BhE,IAA1B,CAAjB,CAAhB;AACA,mBAAO,KAAKa,MAAL,CAAYoD,YAAY,CAAxB,CAAP;AACH;;AAED;;;;;;;;oCAKYjE,I,EAAM;AACd,gBAAMmE,YAAY,IAAIrF,KAAJ,CAAU,IAAV,EAAgBkB,IAAhB,CAAlB;AACA,gBAAMoE,YAAYpC,KAAKC,SAAL,CAAekC,UAAUjC,QAAV,EAAf,CAAlB;;AAEA;AACA,gBAAI,KAAKhB,YAAL,CAAkBmD,GAAlB,CAAsBD,SAAtB,CAAJ,EAAsC;AAClC,uBAAO,KAAKlD,YAAL,CAAkBmD,GAAlB,CAAsBD,SAAtB,CAAP;AACH;;AAED,iBAAKlD,YAAL,CAAkBoD,GAAlB,CAAsBF,SAAtB,EAAiCD,SAAjC;AACA,gBAAMpC,QAAQ,KAAKd,MAAL,CAAYiD,IAAZ,CAAiBC,SAAjB,IAA8B,CAA5C;AACA,iBAAKlD,MAAL,CAAYc,KAAZ,EAAmBwC,GAAnB,CAAuBC,OAAvB,GAAiCzC,KAAjC;AACA,mBAAO,KAAKd,MAAL,CAAYc,KAAZ,CAAP;AACH;;AAED;;;;;;;;uCAKe0C,G,EAAK;AAChB,gBAAML,YAAY,OAAOK,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCzC,KAAKC,SAAL,CAAewC,GAAf,CAAlD;AACA,gBAAMC,SAAS,KAAK3D,kBAAL,CAAwBsD,GAAxB,CAA4BD,SAA5B,CAAf;AACA,gBAAI5F,aAAakG,MAAb,CAAJ,EAA0B;AACtB,oBAAM3C,QAAQ,KAAKjB,aAAL,CAAmBoD,IAAnB,CAAwBO,GAAxB,IAA+B,CAA7C;AACA,qBAAK1D,kBAAL,CAAwBuD,GAAxB,CAA4BF,SAA5B,EAAuCrC,KAAvC;AACA,uBAAOA,KAAP;AACH,aAJD,MAIO;AACH,uBAAO2C,MAAP;AACH;AACJ;;AAED;;;;;;;;uCAKe;AACX,mBAAOnF,QAAQoF,WAAR,CAAoB,IAApB,CAAP;AACH;;;;;;AAGLC,OAAOC,OAAP,GAAiB9E,QAAjB","file":"workbook.js","sourcesContent":["const _isUndefined = require('lodash.isundefined');\r\nconst deepmerge = require('deepmerge');\r\nconst fs = require('fs');\r\nconst utils = require('../utils.js');\r\nconst Worksheet = require('../worksheet');\r\nconst Style = require('../style');\r\nconst Border = require('../style/classes/border.js');\r\nconst Fill = require('../style/classes/fill.js');\r\nconst Font = require('../style/classes/font');\r\nconst DXFCollection = require('./dxfCollection.js');\r\nconst MediaCollection = require('./mediaCollection.js');\r\nconst ChartsCollection = require('./chartsCollection.js');\r\nconst DefinedNameCollection = require('../classes/definedNameCollection.js');\r\nconst types = require('../types/index.js');\r\nconst builder = require('./builder.js');\r\nconst http = require('http');\r\nconst SimpleLogger = require('../logger');\r\n\r\n/* Available options for Workbook\r\n{\r\n    jszip : {\r\n        compression : 'DEFLATE'\r\n    },\r\n    defaultFont : {\r\n        size : 12,\r\n        family : 'Calibri',\r\n        color : 'FFFFFFFF'\r\n    }\r\n}\r\n*/\r\n// Default Options for Workbook\r\nlet workbookDefaultOpts = {\r\n    jszip: {\r\n        compression: 'DEFLATE'\r\n    },\r\n    defaultFont: {\r\n        'color': 'FF000000',\r\n        'name': 'Calibri',\r\n        'size': 12,\r\n        'family': 'roman'\r\n    },\r\n    dateFormat: 'm/d/yy'\r\n};\r\n\r\n\r\nclass Workbook {\r\n\r\n    /**\r\n     * @class Workbook\r\n     * @param {Object} opts Workbook settings\r\n     * @param {Object} opts.jszip\r\n     * @param {String} opts.jszip.compression JSZip compression type. defaults to 'DEFLATE'\r\n     * @param {Object} opts.defaultFont\r\n     * @param {String} opts.defaultFont.color HEX value of default font color. defaults to #000000\r\n     * @param {String} opts.defaultFont.name Font name. defaults to Calibri\r\n     * @param {Number} opts.defaultFont.size Font size. defaults to 12\r\n     * @param {String} opts.defaultFont.family Font family. defaults to roman\r\n     * @param {String} opts.dataFormat Specifies the format for dates in the Workbook. defaults to 'm/d/yy'\r\n     * @param {Number} opts.workbookView.activeTab Specifies an unsignedInt that contains the index to the active sheet in this book view.\r\n     * @param {Boolean} opts.workbookView.autoFilterDateGrouping Specifies a boolean value that indicates whether to group dates when presenting the user with filtering options in the user interface.\r\n     * @param {Number} opts.workbookView.firstSheet Specifies the index to the first sheet in this book view.\r\n     * @param {Boolean} opts.workbookView.minimized Specifies a boolean value that indicates whether the workbook window is minimized.\r\n     * @param {Boolean} opts.workbookView.showHorizontalScroll Specifies a boolean value that indicates whether to display the horizontal scroll bar in the user interface.\r\n     * @param {Boolean} opts.workbookView.showSheetTabs Specifies a boolean value that indicates whether to display the sheet tabs in the user interface.\r\n     * @param {Boolean} opts.workbookView.showVerticalScroll Specifies a boolean value that indicates whether to display the vertical scroll bar.\r\n     * @param {Number} opts.workbookView.tabRatio Specifies ratio between the workbook tabs bar and the horizontal scroll bar.\r\n     * @param {String} opts.workbookView.visibility Specifies visible state of the workbook window. ('hidden', 'veryHidden', 'visible') (§18.18.89)\r\n     * @param {Number} opts.workbookView.windowHeight Specifies the height of the workbook window. The unit of measurement for this value is twips.\r\n     * @param {Number} opts.workbookView.windowWidth Specifies the width of the workbook window. The unit of measurement for this value is twips..\r\n     * @param {Number} opts.workbookView.xWindow Specifies the X coordinate for the upper left corner of the workbook window. The unit of measurement for this value is twips.\r\n     * @param {Number} opts.workbookView.yWindow Specifies the Y coordinate for the upper left corner of the workbook window. The unit of measurement for this value is twips.\r\n     * @param {Boolean} opts.workbookView\r\n     * @param {Object} opts.logger Logger that supports warn and error method, defaults to console\r\n     * @param {String} opts.author Name displayed as document's author\r\n     * @returns {Workbook}\r\n     */\r\n    constructor(opts = {}) {\r\n\r\n        const hasCustomLogger = opts.logger !== undefined;\r\n        const hasValidCustomLogger = hasCustomLogger && typeof opts.logger.warn === 'function' && typeof opts.logger.error === 'function';\r\n\r\n        this.logger = hasValidCustomLogger ? opts.logger : new SimpleLogger({\r\n            logLevel: Number.isNaN(parseInt(opts.logLevel)) ? 0 : parseInt(opts.logLevel)\r\n        });\r\n        if (hasCustomLogger && !hasValidCustomLogger) {\r\n            this.logger.log('opts.logger is not a valid logger');\r\n        }\r\n\r\n        this.opts = deepmerge(workbookDefaultOpts, opts);\r\n        this.author = this.opts.author || 'Microsoft Office User';\r\n\r\n        this.sheets = [];\r\n        this.sharedStrings = [];\r\n        this.sharedStringLookup = new Map();\r\n        this.styles = [];\r\n        this.stylesLookup = new Map();\r\n        this.dxfCollection = new DXFCollection(this);\r\n        this.mediaCollection = new MediaCollection();\r\n        this.chartsCollection = new ChartsCollection();\r\n        this.definedNameCollection = new DefinedNameCollection();\r\n        this.styleData = {\r\n            'numFmts': [],\r\n            'fonts': [],\r\n            'fills': [new Fill({\r\n                type: 'pattern',\r\n                patternType: 'none'\r\n            }), new Fill({\r\n                type: 'pattern',\r\n                patternType: 'gray125'\r\n            })],\r\n            'borders': [new Border()],\r\n            'cellXfs': [{\r\n                'borderId': null,\r\n                'fillId': null,\r\n                'fontId': 0,\r\n                'numFmtId': null\r\n            }]\r\n        };\r\n\r\n        // Lookups for style components to quickly find existing entries\r\n        // - Lookup keys are stringified JSON of a style's toObject result\r\n        // - Lookup values are the indexes for the actual entry in the styleData arrays\r\n        this.styleDataLookup = {\r\n            'fonts': {},\r\n            'fills': this.styleData.fills.reduce((ret, fill, index) => {\r\n                ret[JSON.stringify(fill.toObject())] = index;\r\n                return ret;\r\n            }, {}),\r\n            'borders': this.styleData.borders.reduce((ret, border, index) => {\r\n                ret[JSON.stringify(border.toObject())] = index;\r\n                return ret;\r\n            }, {})\r\n        };\r\n\r\n        // Set Default Font and Style\r\n        this.createStyle({\r\n            font: this.opts.defaultFont\r\n        });\r\n    }\r\n\r\n    /**\r\n     * setSelectedTab\r\n     * @param {Number} tab number of sheet that should be displayed when workbook opens. tabs are indexed starting with 1\r\n     **/\r\n    setSelectedTab(id) {\r\n        this.sheets.forEach((s) => {\r\n            if (s.sheetId === id) {\r\n                s.opts.sheetView.tabSelected = 1;\r\n            } else {\r\n                s.opts.sheetView.tabSelected = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * writeToBuffer\r\n     * Writes Excel data to a node Buffer.\r\n     */\r\n    writeToBuffer() {\r\n        return builder.writeToBuffer(this);\r\n    }\r\n\r\n    /**\r\n     * Generate .xlsx file.\r\n     * @param {String} fileName Name of Excel workbook with .xslx extension\r\n     * @param {http.response | callback} http response object or callback function (optional).\r\n     * If http response object is given, file is written to http response. Useful for web applications.\r\n     * If callback is given, callback called with (err, fs.Stats) passed\r\n     */\r\n    write(fileName, handler) {\r\n\r\n        builder.writeToBuffer(this)\r\n            .then((buffer) => {\r\n                switch (typeof handler) {\r\n                    // handler passed as http response object.\r\n\r\n                    case 'object':\r\n                        if (handler instanceof http.ServerResponse) {\r\n                            handler.writeHead(200, {\r\n                                'Content-Length': buffer.length,\r\n                                'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n                                'Content-Disposition': `attachment; filename=\"${encodeURIComponent(fileName)}\"; filename*=utf-8''${encodeURIComponent(fileName)};`,\r\n                            });\r\n                            handler.end(buffer);\r\n                        } else {\r\n                            throw new TypeError('Unknown object sent to write function.');\r\n                        }\r\n                        break;\r\n\r\n                        // handler passed as callback function\r\n                    case 'function':\r\n                        fs.writeFile(fileName, buffer, function (err) {\r\n                            if (err) {\r\n                                handler(err);\r\n                            } else {\r\n                                fs.stat(fileName, handler);\r\n                            }\r\n                        });\r\n                        break;\r\n\r\n                        // no handler passed, write file to FS.\r\n                    default:\r\n\r\n                        fs.writeFile(fileName, buffer, function (err) {\r\n                            if (err) {\r\n                                throw err;\r\n                            }\r\n                        });\r\n                        break;\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                if (handler instanceof http.ServerResponse) {\r\n                    this.logger.error(e.stack);\r\n                    handler.status = 500;\r\n                    handler.setHeader('Content-Type', 'text/plain');\r\n                    handler.end('500 Server Error');\r\n                } else if (typeof handler === 'function') {\r\n                    handler(e.stack);\r\n                } else {\r\n                    this.logger.error(e.stack);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Add a worksheet to the Workbook\r\n     * @param {String} name Name of the Worksheet\r\n     * @param {Object} opts Options for Worksheet. See Worksheet class definition\r\n     * @returns {Worksheet}\r\n     */\r\n    addWorksheet(name, opts) {\r\n        let newLength = this.sheets.push(new Worksheet(this, name, opts));\r\n        return this.sheets[newLength - 1];\r\n    }\r\n\r\n    /**\r\n     * Add a Style to the Workbook\r\n     * @param {Object} opts Options for the style. See Style class definition\r\n     * @returns {Style}\r\n     */\r\n    createStyle(opts) {\r\n        const thisStyle = new Style(this, opts);\r\n        const lookupKey = JSON.stringify(thisStyle.toObject());\r\n\r\n        // Use existing style if one exists\r\n        if (this.stylesLookup.get(lookupKey)) {\r\n            return this.stylesLookup.get(lookupKey);\r\n        }\r\n\r\n        this.stylesLookup.set(lookupKey, thisStyle);\r\n        const index = this.styles.push(thisStyle) - 1;\r\n        this.styles[index].ids.cellXfs = index;\r\n        return this.styles[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the index of a string from the shared string array if exists and adds the string if it does not and returns the new index\r\n     * @param {String} val Text of string\r\n     * @returns {Number} index of the string in the shared strings array\r\n     */\r\n    getStringIndex(val) {\r\n        const lookupKey = typeof val === \"string\" ? val : JSON.stringify(val);\r\n        const target = this.sharedStringLookup.get(lookupKey);\r\n        if (_isUndefined(target)) {\r\n            const index = this.sharedStrings.push(val) - 1;\r\n            this.sharedStringLookup.set(lookupKey, index);\r\n            return index;\r\n        } else {\r\n            return target;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @func Workbook._generateXML\r\n     * @desc used for testing the Workbook XML generated by the builder\r\n     * @return {Promise} resolves with Workbook XML \r\n     */\r\n    _generateXML() {\r\n        return builder.workbookXML(this);\r\n    }\r\n}\r\n\r\nmodule.exports = Workbook;"]}