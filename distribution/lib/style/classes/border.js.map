{"version":3,"sources":["../../../../source/lib/style/classes/border.js"],"names":["types","require","xmlbuilder","CTColor","BorderOrdinal","opts","color","undefined","style","borderStyle","validate","obj","toObject","Border","left","right","top","bottom","diagonal","outline","diagonalDown","diagonalUp","Object","keys","forEach","opt","indexOf","TypeError","borderXML","bXML","ele","att","ord","thisOEle","addToXMLele","module","exports"],"mappings":"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","file":"border.js","sourcesContent":["const types = require('../../types/index.js');\r\nconst xmlbuilder = require('xmlbuilder');\r\nconst CTColor = require('./ctColor.js');\r\n\r\nclass BorderOrdinal {\r\n    constructor(opts) {\r\n        opts = opts ? opts : {};\r\n        if (opts.color !== undefined) {\r\n            this.color = new CTColor(opts.color);\r\n        }\r\n        if (opts.style !== undefined) {\r\n            this.style = types.borderStyle.validate(opts.style) === true ? opts.style : null;\r\n        }\r\n    }\r\n\r\n    toObject() {\r\n        let obj = {};\r\n        if (this.color !== undefined) {\r\n            obj.color = this.color.toObject();\r\n        }\r\n        if (this.style !== undefined) {\r\n            obj.style = this.style;\r\n        }\r\n        return obj;\r\n    }\r\n}\r\n\r\nclass Border {\r\n    /** \r\n     * @class Border\r\n     * @desc Border object for Style\r\n     * @param {Object} opts Options for Border object\r\n     * @param {Object} opts.left Options for left side of Border\r\n     * @param {String} opts.left.color HEX represenation of color\r\n     * @param {String} opts.left.style Border style\r\n     * @param {Object} opts.right Options for right side of Border\r\n     * @param {String} opts.right.color HEX represenation of color\r\n     * @param {String} opts.right.style Border style\r\n     * @param {Object} opts.top Options for top side of Border\r\n     * @param {String} opts.top.color HEX represenation of color\r\n     * @param {String} opts.top.style Border style\r\n     * @param {Object} opts.bottom Options for bottom side of Border\r\n     * @param {String} opts.bottom.color HEX represenation of color\r\n     * @param {String} opts.bottom.style Border style\r\n     * @param {Object} opts.diagonal Options for diagonal side of Border\r\n     * @param {String} opts.diagonal.color HEX represenation of color\r\n     * @param {String} opts.diagonal.style Border style\r\n     * @param {Boolean} opts.outline States whether borders should be applied only to the outside borders of a cell range\r\n     * @param {Boolean} opts.diagonalDown States whether diagonal border should go from top left to bottom right\r\n     * @param {Boolean} opts.diagonalUp States whether diagonal border should go from bottom left to top right\r\n     * @returns {Border}\r\n     */\r\n    constructor(opts) {\r\n        opts = opts ? opts : {};\r\n        this.left;\r\n        this.right;\r\n        this.top;\r\n        this.bottom;\r\n        this.diagonal;\r\n        this.outline;\r\n        this.diagonalDown;\r\n        this.diagonalUp;\r\n\r\n        Object.keys(opts).forEach((opt) => {\r\n            if (['outline', 'diagonalDown', 'diagonalUp'].indexOf(opt) >= 0) {\r\n                if (typeof opts[opt] === 'boolean') {\r\n                    this[opt] = opts[opt];\r\n                } else {\r\n                    throw new TypeError('Border outline option must be of type Boolean');\r\n                }\r\n            } else if (['left', 'right', 'top', 'bottom', 'diagonal'].indexOf(opt) < 0) { //TODO: move logic to types folder\r\n                throw new TypeError(`Invalid key for border declaration ${opt}. Must be one of left, right, top, bottom, diagonal`);\r\n            } else {\r\n                this[opt] = new BorderOrdinal(opts[opt]);\r\n            }\r\n        });\r\n    }\r\n\r\n    /** \r\n     * @func Border.toObject\r\n     * @desc Converts the Border instance to a javascript object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        let obj = {};\r\n        obj.left;\r\n        obj.right;\r\n        obj.top;\r\n        obj.bottom;\r\n        obj.diagonal;\r\n\r\n        if (this.left !== undefined) {\r\n            obj.left = this.left.toObject();\r\n        }\r\n        if (this.right !== undefined) {\r\n            obj.right = this.right.toObject();\r\n        }\r\n        if (this.top !== undefined) {\r\n            obj.top = this.top.toObject();\r\n        }\r\n        if (this.bottom !== undefined) {\r\n            obj.bottom = this.bottom.toObject();\r\n        }\r\n        if (this.diagonal !== undefined) {\r\n            obj.diagonal = this.diagonal.toObject();\r\n        }\r\n        typeof this.outline === 'boolean' ? obj.outline = this.outline : null;\r\n        typeof this.diagonalDown === 'boolean' ? obj.diagonalDown = this.diagonalDown : null;\r\n        typeof this.diagonalUp === 'boolean' ? obj.diagonalUp = this.diagonalUp : null;\r\n\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * @alias Border.addToXMLele\r\n     * @desc When generating Workbook output, attaches style to the styles xml file\r\n     * @func Border.addToXMLele\r\n     * @param {xmlbuilder.Element} ele Element object of the xmlbuilder module\r\n     */\r\n    addToXMLele(borderXML) {\r\n        let bXML = borderXML.ele('border');\r\n        if (this.outline === true) {\r\n            bXML.att('outline', '1');\r\n        }\r\n        if (this.diagonalUp === true) {\r\n            bXML.att('diagonalUp', '1');\r\n        }\r\n        if (this.diagonalDown === true) {\r\n            bXML.att('diagonalDown', '1');\r\n        }\r\n\r\n        ['left', 'right', 'top', 'bottom', 'diagonal'].forEach((ord) => {\r\n            let thisOEle = bXML.ele(ord);\r\n            if (this[ord] !== undefined) {\r\n                if (this[ord].style !== undefined) {\r\n                    thisOEle.att('style', this[ord].style);\r\n                }\r\n                if (this[ord].color instanceof CTColor) {\r\n                    this[ord].color.addToXMLele(thisOEle);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = Border;"]}