{"version":3,"sources":["../../../../source/lib/worksheet/cf/cf_rule.js"],"names":["_reduce","require","_get","CF_RULE_TYPES","CfRule","ruleConfig","type","priority","formula","dxfId","foundType","TypeError","supported","missingProps","requiredProps","list","prop","push","length","join","ele","thisRule","undefined","att","text","up","module","exports"],"mappings":";;;;;;AAAA,IAAMA,UAAUC,QAAQ,eAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,YAAR,CAAb;AACA,IAAME,gBAAgBF,QAAQ,iBAAR,CAAtB;;IAEMG,M;AAAS;AACX,oBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AACpB,aAAKC,IAAL,GAAYD,WAAWC,IAAvB;AACA,aAAKC,QAAL,GAAgBF,WAAWE,QAA3B;AACA,aAAKC,OAAL,GAAeH,WAAWG,OAA1B;AACA,aAAKC,KAAL,GAAaJ,WAAWI,KAAxB;;AAEA,YAAIC,YAAYP,cAAc,KAAKG,IAAnB,CAAhB;;AAEA,YAAI,CAACI,SAAL,EAAgB;AACZ,kBAAM,IAAIC,SAAJ,CAAc,MAAM,KAAKL,IAAX,GAAkB,mDAAhC,CAAN;AACH;;AAED,YAAI,CAACI,UAAUE,SAAf,EAA0B;AACtB,kBAAM,IAAID,SAAJ,CAAc,kCAAkC,KAAKL,IAAvC,GAA8C,wBAA5D,CAAN;AACH;;AAED,YAAIO,eAAeb,QAAQU,UAAUI,aAAlB,EAAiC,UAACC,IAAD,EAAOC,IAAP,EAAgB;AAChE,gBAAId,KAAK,KAAL,EAAWc,IAAX,EAAiB,IAAjB,MAA2B,IAA/B,EAAqC;AACjCD,qBAAKE,IAAL,CAAUD,IAAV;AACH;AACD,mBAAOD,IAAP;AACH,SALkB,EAKhB,EALgB,CAAnB;;AAOA,YAAIF,aAAaK,MAAjB,EAAyB;AACrB,kBAAM,IAAIP,SAAJ,CAAc,iEAAiEE,aAAaM,IAAb,CAAkB,IAAlB,CAA/E,CAAN;AACH;AACJ;;;;oCAEWC,G,EAAK;AACb,gBAAIC,WAAWD,IAAIA,GAAJ,CAAQ,QAAR,CAAf;AACA,gBAAI,KAAKd,IAAL,KAAcgB,SAAlB,EAA6B;AACzBD,yBAASE,GAAT,CAAa,MAAb,EAAqB,KAAKjB,IAA1B;AACH;AACD,gBAAI,KAAKG,KAAL,KAAea,SAAnB,EAA8B;AAC1BD,yBAASE,GAAT,CAAa,OAAb,EAAsB,KAAKd,KAA3B;AACH;AACD,gBAAI,KAAKF,QAAL,KAAkBe,SAAtB,EAAiC;AAC7BD,yBAASE,GAAT,CAAa,UAAb,EAAyB,KAAKhB,QAA9B;AACH;;AAED,gBAAI,KAAKC,OAAL,KAAiBc,SAArB,EAAgC;AAC5BD,yBAASD,GAAT,CAAa,SAAb,EAAwBI,IAAxB,CAA6B,KAAKhB,OAAlC;AACAa,yBAASI,EAAT;AACH;AACDJ,qBAASI,EAAT;AACH;;;;;;AAILC,OAAOC,OAAP,GAAiBvB,MAAjB","file":"cf_rule.js","sourcesContent":["const _reduce = require('lodash.reduce');\r\nconst _get = require('lodash.get');\r\nconst CF_RULE_TYPES = require('./cf_rule_types');\r\n\r\nclass CfRule { // ยง18.3.1.10 cfRule (Conditional Formatting Rule)\r\n    constructor(ruleConfig) {\r\n        this.type = ruleConfig.type;\r\n        this.priority = ruleConfig.priority;\r\n        this.formula = ruleConfig.formula;\r\n        this.dxfId = ruleConfig.dxfId;\r\n\r\n        let foundType = CF_RULE_TYPES[this.type];\r\n\r\n        if (!foundType) {\r\n            throw new TypeError('\"' + this.type + '\" is not a valid conditional formatting rule type');\r\n        }\r\n\r\n        if (!foundType.supported) {\r\n            throw new TypeError('Conditional formatting type \"' + this.type + '\" is not yet supported');\r\n        }\r\n\r\n        let missingProps = _reduce(foundType.requiredProps, (list, prop) => {\r\n            if (_get(this, prop, null) === null) {\r\n                list.push(prop);\r\n            }\r\n            return list;\r\n        }, []);\r\n\r\n        if (missingProps.length) {\r\n            throw new TypeError('Conditional formatting rule is missing required properties: ' + missingProps.join(', '));\r\n        }\r\n    }\r\n\r\n    addToXMLele(ele) {\r\n        let thisRule = ele.ele('cfRule');\r\n        if (this.type !== undefined) {\r\n            thisRule.att('type', this.type);\r\n        }\r\n        if (this.dxfId !== undefined) {\r\n            thisRule.att('dxfId', this.dxfId);\r\n        }\r\n        if (this.priority !== undefined) {\r\n            thisRule.att('priority', this.priority);\r\n        }\r\n\r\n        if (this.formula !== undefined) {\r\n            thisRule.ele('formula').text(this.formula);\r\n            thisRule.up();\r\n        }\r\n        thisRule.up();\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = CfRule;"]}